variables:
  DOCKER_REGISTRY: "docker.grammatech.com"
  LOCAL_IMAGE_NAME: '$CI_BUILD_REF_NAME-$CI_PIPELINE_ID'
  GIT_SUBMODULE_STRATEGY: recursive

before_script:
  - docker info

stages:
  - check-format
  - build
  - deploy
  - cleanup

check-format:
  stage: check-format
  script:
    - docker build --rm -f .ci/Dockerfile.formatter .

.build-template: &build
  script:
    - export COMPILER_NAME=$(echo ${COMPILER} | sed 's/clang++/clang/;s/g++/gcc/;s/-*//g' )
    - export LOCAL_IMAGE_BASE=${LOCAL_IMAGE_NAME}-${OS}-${COMPILER_NAME}
    - docker build -f .ci/Dockerfile.${OS} -t ${LOCAL_IMAGE_BASE} --build-arg CXX_COMPILER=${COMPILER} .
    - docker run ${LOCAL_IMAGE_BASE} TestGTIRB
    - docker build -f .ci/Dockerfile.add-capstone --build-arg CXX_COMPILER=${COMPILER} --build-arg BASE_IMAGE=${LOCAL_IMAGE_BASE} .
    - docker tag ${LOCAL_IMAGE_BASE} $DOCKER_REGISTRY/$CI_PROJECT_PATH/${OS}-${COMPILER_NAME};
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY
    - docker push $DOCKER_REGISTRY/$CI_PROJECT_PATH/${OS}-${COMPILER_NAME};

# This does not work: Ubuntu 14.04 has gcc 4.8.4, which is too old.
#
# build-ubuntu14:
#   stage: build
#   variables:
#     OS: 'ubuntu14'
#     COMPILER: 'g++'
#   <<: *build

build-ubuntu16-gcc7:
  stage: build
  variables:
    OS: 'ubuntu16'
    COMPILER: 'g++-7'
  <<: *build

build-ubuntu16-clang:
  stage: build
  variables:
    OS: 'ubuntu16'
    COMPILER: 'clang++'
  <<: *build

build-ubuntu18-gcc7:
  stage: build
  variables:
    OS: 'ubuntu18'
    COMPILER: 'g++-7'
  <<: *build

build-ubuntu18-clang:
  stage: build
  variables:
    OS: 'ubuntu18'
    COMPILER: 'clang++'
  <<: *build

build-arch-gcc:
  stage: build
  variables:
    OS: 'arch'
    COMPILER: 'g++'
  <<: *build

build-arch-clang:
  stage: build
  variables:
    OS: 'arch'
    COMPILER: 'clang++'
  <<: *build

pages:
  stage: deploy
  variables:
    OS: 'arch'
    COMPILER: 'g++'
  script:
    - export COMPILER_NAME=$(echo ${COMPILER} | sed s/clang++/clang/ | sed s/g++/gcc/)
    - export CONTAINER_FILE=${LOCAL_IMAGE_NAME}-arch.container
    - mkdir -p $(dirname ${CONTAINER_FILE})
    - docker run --cidfile=${CONTAINER_FILE} ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER_NAME} /bin/bash -c "mkdir -p build-doc; cmake doc/doxy/ -Bbuild-doc; cd build-doc; cmake --build . --target doc; cd ../; cp -R build-doc/html /public";
    - docker cp  $(cat ${CONTAINER_FILE}):/public ./;
    - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER_NAME}
  allow_failure: true
  artifacts:
    paths:
      - public
  only:
    - master

cleanup:
  stage: cleanup
  variables:
    OS: 'ubuntu16'
    COMPILER: 'g++-7'
  script:
    - docker rmi -f ${LOCAL_IMAGE_NAME}-ubuntu16-gcc7
    - docker rmi -f ${LOCAL_IMAGE_NAME}-ubuntu16-clang
    - docker rmi -f ${LOCAL_IMAGE_NAME}-ubuntu18-gcc7
    - docker rmi -f ${LOCAL_IMAGE_NAME}-ubuntu18-clang
    - docker rmi -f ${LOCAL_IMAGE_NAME}-arch-gcc
    - docker rmi -f ${LOCAL_IMAGE_NAME}-arch-clang
  when: always
